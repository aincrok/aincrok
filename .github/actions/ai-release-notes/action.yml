name: AI Release Notes
description: Generate intelligent release notes using Claude Code Action

inputs:
    claude_code_oauth_token:
        required: true
        description: 'Claude Code OAuth token for API access'
    base_ref:
        required: true
        description: 'Base git reference for comparison (e.g., previous version tag or commit)'
    head_ref:
        required: true
        description: 'Head git reference for comparison (e.g., current version tag or commit)'
    custom_instructions:
        required: false
        default: ""
        description: 'Additional instructions for Claude to customize the release notes'
    model:
        required: false
        default: 'claude-3-5-sonnet-20241022'
        description: 'Claude model to use for generation'

outputs:
    release_notes:
        description: "AI generated release notes"
        value: ${{ steps.claude.outputs.response }}

runs:
    using: "composite"
    steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
              fetch-depth: 0

        - name: Generate Release Notes with Claude
          id: claude
          uses: anthropics/claude-code-action@v1
          with:
              claude_code_oauth_token: ${{ inputs.claude_code_oauth_token }}
              prompt: |
                  Analyze the changes between git references ${{ inputs.base_ref }} and ${{ inputs.head_ref }} and generate professional release notes.
                  
                  **Requirements:**
                  1. Examine git commits, diffs, and any PR/issue context between these references
                  2. Create user-focused release notes organized into these sections:
                     - ‚ú® **Features** - New functionality added
                     - üêõ **Bug Fixes** - Issues that were resolved
                     - ‚ö° **Improvements** - Enhancements to existing features
                     - üîß **Technical** - Internal/developer changes (only if significant)
                  3. Write in clear, accessible language for end users
                  4. Focus on the impact and benefits to users, not implementation details
                  5. Use bullet points with concise descriptions
                  6. If no changes in a category, omit that section
                  7. Prioritize user-facing changes over internal refactoring
                  
                  **Output Format:**
                  Start directly with the sections, no introductory text. Use markdown formatting.
                  
                  ${{ inputs.custom_instructions != '' && format('**Additional Instructions:**\n{0}', inputs.custom_instructions) || '' }}
              claude_args: '--model ${{ inputs.model }}'
