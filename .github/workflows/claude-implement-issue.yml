name: Claude Autonomous Issue Implementation

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created, edited]

jobs:
  claude-implement:
    # Trigger on specific implementation commands
    if: |
      (github.event_name == 'issues' && 
       (contains(github.event.issue.body, '@claude implement') ||
        contains(github.event.issue.title, '@claude implement'))) ||
      (github.event_name == 'issue_comment' && 
       contains(github.event.comment.body, '@claude implement'))
    
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Prevent runaway implementations
    
    permissions:
      contents: write      # Create branches and commits
      pull-requests: write # Create and manage PRs
      issues: write        # Update issue status and labels
      actions: read        # Read CI results
      id-token: write      # Claude Code authentication
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for branch operations
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Implementation Mode
        id: mode
        run: |
          # Determine implementation mode from trigger
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            COMMENT_BODY="${{ github.event.issue.body }}"
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
          else
            COMMENT_BODY="${{ github.event.comment.body }}"
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
          fi
          
          # Extract implementation flags
          PLAN_ONLY="false"
          DRAFT_MODE="false"
          
          if echo "$COMMENT_BODY" | grep -q "@claude implement --plan-only"; then
            PLAN_ONLY="true"
          elif echo "$COMMENT_BODY" | grep -q "@claude implement --draft"; then
            DRAFT_MODE="true"
          fi
          
          echo "plan_only=$PLAN_ONLY" >> $GITHUB_OUTPUT
          echo "draft_mode=$DRAFT_MODE" >> $GITHUB_OUTPUT
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          
          echo "🎯 Implementation Mode:"
          echo "  - Plan Only: $PLAN_ONLY"
          echo "  - Draft Mode: $DRAFT_MODE"
          echo "  - Issue: #$ISSUE_NUMBER"

      - name: Add Implementation Label
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add status label to issue
          if [[ "${{ steps.mode.outputs.plan_only }}" == "true" ]]; then
            gh issue edit ${{ steps.mode.outputs.issue_number }} --add-label "claude-planning"
          else
            gh issue edit ${{ steps.mode.outputs.issue_number }} --add-label "claude-implementing"
          fi

      - name: Setup Implementation Environment
        run: |
          # Configure git for commits
          git config user.name "claude-bot"
          git config user.email "claude-bot@anthropic.com"
          
          # Install dependencies if needed
          if [ -f "package.json" ]; then
            echo "📦 Setting up Node.js environment..."
            npm ci 2>/dev/null || npm install
          fi

      - name: Run Autonomous Claude Implementation
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            🤖 **AUTONOMOUS DEVELOPER MODE ACTIVATED**
            
            You are implementing GitHub Issue #${{ steps.mode.outputs.issue_number }}: "${{ steps.mode.outputs.issue_title }}"
            
            **IMPLEMENTATION WORKFLOW:**
            
            ${{ steps.mode.outputs.plan_only == 'true' && '🎯 **PLAN-ONLY MODE**: Generate detailed implementation plan without executing' || '🚀 **FULL IMPLEMENTATION MODE**: Complete autonomous implementation' }}
            
            **Phase 1: ANALYSIS & PLANNING**
            - Read and thoroughly understand the issue requirements
            - Analyze existing codebase and identify files that need changes
            - Create detailed implementation strategy
            - Identify potential risks and edge cases
            
            ${{ steps.mode.outputs.plan_only == 'false' && '**Phase 2: IMPLEMENTATION**
            - Create feature branch: `claude/issue-${{ steps.mode.outputs.issue_number }}-{descriptive-name}`
            - Implement solution following project conventions (see CLAUDE.md)
            - Write comprehensive, tested code
            - Handle edge cases and error conditions
            - Ensure backwards compatibility
            
            **Phase 3: QUALITY ASSURANCE**
            - Run existing tests: `pnpm test` (if available)
            - Run linting: `pnpm lint`
            - Run type checking: `pnpm check-types`
            - Fix any issues found
            
            **Phase 4: PR CREATION**
            - Commit changes with semantic commit messages
            - Push feature branch to origin
            - Create pull request with comprehensive description
            - Link PR to original issue using "Closes #${{ steps.mode.outputs.issue_number }}"
            - Add appropriate labels: `claude-implemented`, `needs-review`
            
            **Phase 5: SELF-REVIEW**
            - Review your own PR thoroughly
            - Add inline comments explaining complex logic
            - Suggest improvements if any
            - Verify all requirements are met' || '' }}
            
            **SAFETY CONSTRAINTS:**
            - Maximum 50 files changed per implementation
            - No changes to workflow files (.github/workflows/)
            - No changes to security-sensitive files (secrets, auth)
            - Always use feature branches, never commit to main
            - Include comprehensive error handling
            
            **QUALITY REQUIREMENTS:**
            - Follow existing code style and patterns
            - Add appropriate comments and documentation
            - Ensure type safety (TypeScript)
            - Include test coverage for new functionality
            - Use semantic commit messages
            
            ${{ steps.mode.outputs.draft_mode == 'true' && '**DRAFT MODE**: Create draft PR for human review before making it ready' || '**STANDARD MODE**: Create ready-for-review PR' }}
            
            **Available Tools:** Use all available tools including file operations, git commands, npm/pnpm commands, GitHub CLI (`gh`), and testing frameworks.
            
            Start with a comprehensive analysis of the issue and codebase. Be thorough, methodical, and follow software engineering best practices.
            
          claude_args: '--model claude-sonnet-4-20250514'

      - name: Update Issue Status
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Remove implementation labels and add completion status
          gh issue edit ${{ steps.mode.outputs.issue_number }} --remove-label "claude-implementing,claude-planning"
          
          if [[ "${{ job.status }}" == "success" ]]; then
            if [[ "${{ steps.mode.outputs.plan_only }}" == "true" ]]; then
              gh issue edit ${{ steps.mode.outputs.issue_number }} --add-label "claude-planned"
              gh issue comment ${{ steps.mode.outputs.issue_number }} --body "✅ **Implementation plan completed!** Check the workflow logs for detailed analysis and implementation strategy."
            else
              gh issue edit ${{ steps.mode.outputs.issue_number }} --add-label "claude-implemented"
              gh issue comment ${{ steps.mode.outputs.issue_number }} --body "🎉 **Autonomous implementation completed!** A pull request has been created and is ready for review."
            fi
          else
            gh issue edit ${{ steps.mode.outputs.issue_number }} --add-label "claude-failed"
            gh issue comment ${{ steps.mode.outputs.issue_number }} --body "❌ **Implementation failed.** Please check the workflow logs for details. Human intervention may be required."
          fi

      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "🧹 Cleaning up failed implementation..."
          
          # Try to clean up any partial branches
          BRANCH_NAME="claude/issue-${{ steps.mode.outputs.issue_number }}"
          if git show-ref --verify --quiet refs/heads/$BRANCH_NAME; then
            git branch -D $BRANCH_NAME 2>/dev/null || true
          fi
          
          # Clean up any uncommitted changes
          git reset --hard HEAD
          git clean -fd