name: Publish Extension
on:
    pull_request:
        types: [closed]
    workflow_dispatch:

env:
    GIT_REF: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || 'main' }}
    NODE_VERSION: 20.19.2
    PNPM_VERSION: 10.8.1
    TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
    publish-extension:
        runs-on: ubuntu-latest
        permissions:
            contents: write # Required for pushing tags.
            id-token: write # Required for Claude Code Action
        if: >
            ( github.event_name == 'pull_request' &&
            github.event.pull_request.base.ref == 'main' &&
            (contains(github.event.pull_request.title, 'Changeset version bump') ||
            contains(github.event.pull_request.labels.*.name, 'force-release')) ) ||
            github.event_name == 'workflow_dispatch'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: ${{ env.GIT_REF }}
            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "pnpm"
            - name: Install dependencies
              run: pnpm install
            - name: Configure Git
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
            - name: Create .env file
              run: echo "AINCROK_POSTHOG_API_KEY=${{ secrets.POSTHOG_API_KEY }}" >> .env
              
            - name: Cache pnpm dependencies
              uses: actions/cache@v4
              with:
                path: ~/.pnpm-store
                key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                restore-keys: |
                  ${{ runner.os }}-pnpm-

            - name: Lint
              run: pnpm lint

            - name: Type Check
              run: pnpm check-types

            - name: Test
              run: pnpm test

            - name: Build Workspace Dependencies
              run: |
                  echo "Building required workspace packages..."
                  pnpm --filter @roo-code/build --filter @roo-code/types build

            - name: Build Extension
              run: pnpm --filter ./src bundle

            - name: Pre-publish Validation
              run: |
                  echo "🔍 Validating extension manifest..."
                  current_package_version=$(node -p "require('./src/package.json').version")
                  publisher=$(node -p "require('./src/package.json').publisher")
                  license=$(node -p "require('./src/package.json').license")
                  vscode_engine=$(node -p "require('./src/package.json').engines.vscode")
                  echo "Extension: ${publisher}.aincrok@${current_package_version}"
                  echo "VSCode Engine: ${vscode_engine}"
                  echo "License: ${license}"
                  echo "📁 Checking required files..."
                  if [ ! -f src/dist/extension.js ]; then
                    echo "❌ Missing main extension file (src/dist/extension.js). Build step may have failed or not run. Ensure 'pnpm --filter ./src bundle' completes successfully before validation." && exit 1
                  fi
                  if [ ! -f src/assets/icons/logo-outline-black.png ]; then
                    echo "❌ Missing icon file (src/assets/icons/logo-outline-black.png)" && exit 1
                  fi
                  if [ ! -f src/package.nls.json ]; then
                    echo "❌ Missing localization file (src/package.nls.json)" && exit 1
                  fi
                  echo "✅ All required files found."
                  echo "✅ Running VSCE validation..."
                  mkdir -p bin
                  cd src && npx @vscode/vsce package --no-dependencies --out ../bin/validation-test.vsix
                  echo "✅ VSCE validation passed!"
                  rm -f bin/validation-test.vsix
            - name: Package Extension
              run: |
                  echo "📦 Starting VSIX packaging process..."
                  
                  echo "Creating bin directory..."
                  mkdir -p bin
                  
                  echo "Building webview UI..."
                  pnpm --filter @roo-code/vscode-webview build
                  
                  echo "Bundling extension..."
                  pnpm --filter ./src bundle
                  
                  echo "Creating VSIX package..."
                  cd src && npx @vscode/vsce package --no-dependencies --out ../bin
                  
                  echo "Verifying VSIX was created..."
                  cd ..
                  ls -la bin/
                  
            - name: Validate VSIX Package
              run: |
                  current_package_version=$(node -p "require('./src/package.json').version")
                  vsix_file="bin/aincrok-${current_package_version}.vsix"
                  
                  echo "🔍 Validating VSIX package: $vsix_file"
                  
                  if [ ! -f "$vsix_file" ]; then
                    echo "❌ VSIX file not found: $vsix_file"
                    echo "Contents of bin directory:"
                    ls -la bin/ || echo "bin directory does not exist"
                    exit 1
                  fi
                  
                  echo "✅ VSIX file created: $(ls -lh "$vsix_file")"
                  
                  # Validate VSIX contents
                  echo "Validating VSIX contents..."
                  unzip -l "$vsix_file" | grep -E "(package\.json|extension\.js|extension\.vsixmanifest)" || {
                    echo "❌ VSIX validation failed - missing required files"
                    echo "VSIX contents:"
                    unzip -l "$vsix_file"
                    exit 1
                  }
                  
                  # Check for required files from original validation
                  unzip -l "$vsix_file" > /tmp/vsix-contents.txt
                  echo "Checking for required extension files..."
                  
                  required_files=(
                    "extension/package.json"
                    "extension/package.nls.json" 
                    "extension/dist/extension.js"
                    "extension/webview-ui/audio/celebration.wav"
                    "extension/webview-ui/build/assets/index.js"
                    "extension/assets/codicons/codicon.ttf"
                    "extension/assets/vscode-material-icons/icons/3d.svg"
                    ".env"
                  )
                  
                  for file in "${required_files[@]}"; do
                    if ! grep -q "$file" /tmp/vsix-contents.txt; then
                      echo "⚠️ Warning: Required file not found in VSIX: $file"
                    else
                      echo "✅ Found: $file"
                    fi
                  done
                  
                  rm /tmp/vsix-contents.txt
                  echo "✅ VSIX validation completed"
                  
            # Get previous version for comparison before creating the new tag
            - name: Get Previous Version
              id: get_previous_version
              run: |
                  current_version=$(node -p "require('./src/package.json').version")
                  echo "Current version: $current_version"
                  
                  # For Aincrok first release, we need to find appropriate base version
                  # Look for previous Aincrok tags (0.x.x or 1.x.x series)
                  if [[ "$current_version" == 0.* ]]; then
                    # For 0.x.x versions, look for previous 0.x.x tags
                    prev_tag=$(git tag -l 'v0.*' | grep -v "v${current_version}" | sort -V | tail -1)
                    if [ -n "$prev_tag" ]; then
                      prev_version=${prev_tag#v}
                      echo "Found previous Aincrok 0.x version: $prev_version"
                    else
                      prev_version="0.0.0"
                      echo "First Aincrok release in 0.x series, using 0.0.0 as base"
                    fi
                  elif [[ "$current_version" == 1.* ]]; then
                    # For 1.x.x versions, look for previous 1.x.x or fall back to latest 0.x.x
                    prev_tag=$(git tag -l 'v1.*' | grep -v "v${current_version}" | sort -V | tail -1)
                    if [ -n "$prev_tag" ]; then
                      prev_version=${prev_tag#v}
                      echo "Found previous Aincrok 1.x version: $prev_version"
                    else
                      # No 1.x.x tags, look for latest 0.x.x tag
                      prev_tag=$(git tag -l 'v0.*' | sort -V | tail -1)
                      if [ -n "$prev_tag" ]; then
                        prev_version=${prev_tag#v}
                        echo "First 1.x release, using latest 0.x version: $prev_version"
                      else
                        prev_version="0.0.0"
                        echo "First Aincrok release overall, using 0.0.0 as base"
                      fi
                    fi
                  else
                    # For other versions, use general logic
                    prev_tag=$(git tag -l 'v*' | grep -v "v${current_version}" | sort -V | tail -1)
                    if [ -n "$prev_tag" ]; then
                      prev_version=${prev_tag#v}
                    else
                      prev_version="0.0.0"
                    fi
                  fi
                  
                  echo "version=$prev_version" >> $GITHUB_OUTPUT
                  echo "Using previous version: $prev_version for comparison"

            # Generate enhanced release notes for the GitHub release
            - name: Generate AI Release Notes
              id: ai_release_notes
              uses: ./.github/actions/ai-release-notes
              with:
                  claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
                  base_ref: 'v${{ steps.get_previous_version.outputs.version }}'
                  head_ref: 'HEAD'
                  custom_instructions: 'Create engaging release notes for this VS Code extension. Highlight new features, improvements, and bug fixes that users will care about. Use emojis appropriately and keep the tone professional but friendly.'

            - name: Create and Push Git Tag
              run: |
                  current_package_version=$(node -p "require('./src/package.json').version")
                  
                  # Check if tag already exists locally or remotely
                  if git show-ref --tags "v${current_package_version}" > /dev/null 2>&1; then
                    echo "Tag v${current_package_version} already exists locally"
                  elif git ls-remote --tags origin "v${current_package_version}" | grep -q "v${current_package_version}"; then
                    echo "Tag v${current_package_version} already exists on remote"
                    # Fetch the tag locally if it exists on remote
                    git fetch origin "refs/tags/v${current_package_version}:refs/tags/v${current_package_version}"
                  else
                    echo "Creating new tag v${current_package_version}"
                    git tag -a "v${current_package_version}" -m "Release v${current_package_version}"
                    git push origin "v${current_package_version}" --no-verify
                    echo "Successfully created and pushed git tag v${current_package_version}"
                  fi
            - name: Publish Extension
              env:
                  VSCE_PAT: ${{ secrets.VSCE_TOKEN }}
                  OVSX_PAT: ${{ secrets.OVSX_TOKEN }}
              run: |
                  current_package_version=$(node -p "require('./src/package.json').version")
                  vsix_file="bin/aincrok-${current_package_version}.vsix"
                  
                  echo "🚀 Publishing $vsix_file to marketplaces..."
                  
                  # Final verification that VSIX exists (should have been validated already)
                  if [ ! -f "$vsix_file" ]; then
                    echo "❌ VSIX file not found: $vsix_file"
                    exit 1
                  fi
                  
                  echo "📦 Publishing to VS Code Marketplace..."
                  npx @vscode/vsce@3.3.2 publish -p "$VSCE_PAT" "$vsix_file"
                  echo "✅ Successfully published to VS Code Marketplace"
                  
                  echo "📦 Publishing to Open VSX Registry..."
                  npx ovsx@0.10.4 publish -p "$OVSX_PAT" "$vsix_file"
                  echo "✅ Successfully published to Open VSX Registry"
                  
                  echo "🎉 Publishing completed successfully for version $current_package_version"
            - name: Create GitHub Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  current_package_version=$(node -p "require('./src/package.json').version")

                  # Use AI-generated release notes if available, otherwise extract from changelog
                  if [ -n "${{ steps.ai_release_notes.outputs.release_notes }}" ]; then
                    changelog_content="${{ steps.ai_release_notes.outputs.release_notes }}"
                    echo "Using AI-generated release notes"
                  else
                    # Extract changelog for current version
                    echo "Extracting changelog for version ${current_package_version}"
                    # Try with 'v' prefix first (newer format), then without (older format)
                    changelog_content=$(sed -n "/## \\[v${current_package_version}\\]/,/## \\[/p" CHANGELOG.md | sed '$d')
                    if [ -z "$changelog_content" ]; then
                      changelog_content=$(sed -n "/## \\[${current_package_version}\\]/,/## \\[/p" CHANGELOG.md | sed '$d')
                    fi

                    # If changelog extraction failed, use a default message
                    if [ -z "$changelog_content" ]; then
                      echo "Warning: No changelog section found for version ${current_package_version}"
                      changelog_content="Release v${current_package_version}"
                    else
                      echo "Found changelog section for version ${current_package_version}"
                    fi
                  fi

                  # Check if release already exists
                  if gh release view "v${current_package_version}" > /dev/null 2>&1; then
                    echo "⚠️ GitHub Release v${current_package_version} already exists"
                    echo "Updating existing release with new assets if needed..."
                    
                    # Check if VSIX asset already exists
                    if gh release view "v${current_package_version}" --json assets --jq '.assets[].name' | grep -q "aincrok-${current_package_version}.vsix"; then
                      echo "VSIX asset already exists in release"
                    else
                      echo "Adding VSIX asset to existing release..."
                      gh release upload "v${current_package_version}" bin/aincrok-${current_package_version}.vsix
                    fi
                  else
                    echo "Creating new GitHub Release v${current_package_version}..."
                    gh release create "v${current_package_version}" \
                      --title "Release v${current_package_version}" \
                      --notes "$changelog_content" \
                      --target ${{ env.GIT_REF }} \
                      bin/aincrok-${current_package_version}.vsix
                    echo "✅ Successfully created GitHub Release v${current_package_version}"
                  fi
