name: Publish Extension
on:
    pull_request:
        types: [closed]
    workflow_dispatch:

env:
    GIT_REF: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || 'main' }}
    NODE_VERSION: 20.19.2
    PNPM_VERSION: 10.8.1
    TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
    publish-extension:
        runs-on: ubuntu-latest
        permissions:
            contents: write # Required for pushing tags.
            id-token: write # Required for Claude Code Action
        if: >
            ( github.event_name == 'pull_request' &&
            github.event.pull_request.base.ref == 'main' &&
            (contains(github.event.pull_request.title, 'Changeset version bump') ||
            contains(github.event.pull_request.labels.*.name, 'force-release')) ) ||
            github.event_name == 'workflow_dispatch'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: ${{ env.GIT_REF }}
            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "pnpm"
            - name: Install dependencies
              run: pnpm install
            - name: Configure Git
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
            - name: Create .env file
              run: echo "AINCROK_POSTHOG_API_KEY=${{ secrets.POSTHOG_API_KEY }}" >> .env
            - name: Package Extension
              run: |
                  current_package_version=$(node -p "require('./src/package.json').version")
                  pnpm vsix:production

                  # Save VSIX contents to a temporary file to avoid broken pipe issues.
                  unzip -l bin/aincrok-${current_package_version}.vsix > /tmp/aincrok-vsix-contents.txt

                  # Check for required files.
                  grep -q "extension/package.json" /tmp/aincrok-vsix-contents.txt || exit 1
                  grep -q "extension/package.nls.json" /tmp/aincrok-vsix-contents.txt || exit 1
                  grep -q "extension/dist/extension.js" /tmp/aincrok-vsix-contents.txt || exit 1
                  grep -q "extension/webview-ui/audio/celebration.wav" /tmp/aincrok-vsix-contents.txt || exit 1
                  grep -q "extension/webview-ui/build/assets/index.js" /tmp/aincrok-vsix-contents.txt || exit 1
                  grep -q "extension/assets/codicons/codicon.ttf" /tmp/aincrok-vsix-contents.txt || exit 1
                  grep -q "extension/assets/vscode-material-icons/icons/3d.svg" /tmp/aincrok-vsix-contents.txt || exit 1
                  grep -q ".env" /tmp/aincrok-vsix-contents.txt || exit 1

                  # Clean up temporary file.
                  rm /tmp/aincrok-vsix-contents.txt
            # Get previous version for comparison before creating the new tag
            - name: Get Previous Version
              id: get_previous_version
              run: |
                  current_version=$(node -p "require('./src/package.json').version")
                  echo "Current version: $current_version"
                  
                  # For Aincrok (v1.x.x), look for previous Aincrok tags
                  # For first release, use 0.0.0 as base for comparison
                  if [[ "$current_version" == 1.* ]]; then
                    prev_tag=$(git tag -l 'v1.*' | grep -v "v${current_version}" | sort -V | tail -1)
                    if [ -n "$prev_tag" ]; then
                      prev_version=${prev_tag#v}
                      echo "Found previous Aincrok version: $prev_version"
                    else
                      prev_version="0.0.0"
                      echo "First Aincrok release, using 0.0.0 as base"
                    fi
                  else
                    # For other versions, use general logic
                    prev_tag=$(git tag -l 'v*' | grep -v "v${current_version}" | sort -V | tail -1)
                    if [ -n "$prev_tag" ]; then
                      prev_version=${prev_tag#v}
                    else
                      prev_version="0.0.0"
                    fi
                  fi
                  
                  echo "version=$prev_version" >> $GITHUB_OUTPUT
                  echo "Using previous version: $prev_version for comparison"

            # Generate enhanced release notes for the GitHub release
            - name: Generate AI Release Notes
              id: ai_release_notes
              uses: ./.github/actions/ai-release-notes
              with:
                  claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
                  base_ref: 'v${{ steps.get_previous_version.outputs.version }}'
                  head_ref: 'HEAD'
                  custom_instructions: 'Create engaging release notes for this VS Code extension. Highlight new features, improvements, and bug fixes that users will care about. Use emojis appropriately and keep the tone professional but friendly.'

            - name: Create and Push Git Tag
              run: |
                  current_package_version=$(node -p "require('./src/package.json').version")
                  git tag -a "v${current_package_version}" -m "Release v${current_package_version}"
                  git push origin "v${current_package_version}" --no-verify
                  echo "Successfully created and pushed git tag v${current_package_version}"
            - name: Publish Extension
              env:
                  VSCE_PAT: ${{ secrets.VSCE_TOKEN }}
                  OVSX_PAT: ${{ secrets.OVSX_TOKEN }}
              run: |
                  current_package_version=$(node -p "require('./src/package.json').version")
                  pnpm --filter aincrok publish:marketplace
                  echo "Successfully published version $current_package_version to VS Code Marketplace"
            - name: Create GitHub Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  current_package_version=$(node -p "require('./src/package.json').version")

                  # Use AI-generated release notes if available, otherwise extract from changelog
                  if [ -n "${{ steps.ai_release_notes.outputs.release_notes }}" ]; then
                    changelog_content="${{ steps.ai_release_notes.outputs.release_notes }}"
                    echo "Using AI-generated release notes"
                  else
                    # Extract changelog for current version
                    echo "Extracting changelog for version ${current_package_version}"
                    # Try with 'v' prefix first (newer format), then without (older format)
                    changelog_content=$(sed -n "/## \\[v${current_package_version}\\]/,/## \\[/p" CHANGELOG.md | sed '$d')
                    if [ -z "$changelog_content" ]; then
                      changelog_content=$(sed -n "/## \\[${current_package_version}\\]/,/## \\[/p" CHANGELOG.md | sed '$d')
                    fi

                    # If changelog extraction failed, use a default message
                    if [ -z "$changelog_content" ]; then
                      echo "Warning: No changelog section found for version ${current_package_version}"
                      changelog_content="Release v${current_package_version}"
                    else
                      echo "Found changelog section for version ${current_package_version}"
                    fi
                  fi

                  # Create release with changelog content
                  gh release create "v${current_package_version}" \
                    --title "Release v${current_package_version}" \
                    --notes "$changelog_content" \
                    --target ${{ env.GIT_REF }} \
                    bin/aincrok-${current_package_version}.vsix
                  echo "Successfully created GitHub Release v${current_package_version}"
